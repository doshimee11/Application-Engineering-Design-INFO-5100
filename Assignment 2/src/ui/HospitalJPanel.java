/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */

package ui;

import Parser.Parser;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.City;
import model.Community;
import model.Doctor;
import model.DoctorDirectory;
import model.Hospital;
import model.HospitalDirectory;
import model.NewSystem;
import model.Patient;
import model.PatientDirectory;
import model.Person;
import model.PersonDirectory;

/**
 *
 * @author meetdoshi
 */

public class HospitalJPanel extends javax.swing.JPanel {

    /**
     * Creates new form HospitalJPanel
     */
    
    String[] communityList;
    PatientDirectory patientDirectory;
    Hospital newHospital;
    City city;
    HospitalDirectory hospitalDirectory;
    NewSystem newSystem;
    DefaultTableModel hospitalTableModel;
    DefaultTableModel manageDoctorModel;
    DefaultTableModel managePersonModel;
    Hospital hospital;
    PersonDirectory personDirectory;
    Hospital selectedHospital;
    Person selectedPerson;
    DoctorDirectory doctorDirectory;
    Community community;
    boolean hospitalAdminLoggedIn;
    Parser parser = new Parser();
    int hospitalNumber;
    String hospitalStreetName, hospitalCommunity, hospitalCity, inpUpdate;
    long hospitalZIPCode;
    ArrayList<Integer> hospNumbers;
    
    public HospitalJPanel() {
        initComponents();
    }
    
    public HospitalJPanel(DoctorDirectory doctorDirectory, NewSystem newSystem, String[] communityList, PatientDirectory patientDirectory, Hospital newHospital, City city, HospitalDirectory hospitalDirectory, PersonDirectory personDirectory) {
        initComponents();
        this.communityList = communityList;
        this.newHospital = newHospital;
        this.city = city;
        this.patientDirectory = patientDirectory;
        this.hospitalDirectory = hospitalDirectory;
        this.newSystem = newSystem;
        this.doctorDirectory = doctorDirectory;
        this.personDirectory = personDirectory;
        
        hospitalAdminLoginPanel.setVisible(true);
        
        hospNumbers = new ArrayList<Integer>();
//        for(Community c: city.getCommunityList()){
//            for(Hospital h: c.getHospitalList()){
//                hospNumbers.add(h.getHospitalNumber());
//            }
//        }
//        hospitalNumbers.removeAllItems();
//        for(int s: hospNumbers){
//            hospitalNumbers.addItem(String.valueOf(s));
//        }
        
        hospCommunityBox.removeAllItems();
        hospCityBox.removeAllItems();
        for(City c: newSystem.getCityList()){
            hospCityBox.addItem(c.getCityName());
        }
        
        hospitalTableModel = (DefaultTableModel) hospitalTable.getModel();
        manageDoctorModel = (DefaultTableModel) manageDoctorTable.getModel();
        managePersonModel = (DefaultTableModel) managePersonTable.getModel();
        populateHospitalTable();
        populateManageTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        hospitalAdminLoginPanel = new javax.swing.JPanel();
        hospitalAdminIDText = new javax.swing.JLabel();
        hospitalAdminIDField = new javax.swing.JTextField();
        hospitalAdminPasswordText = new javax.swing.JLabel();
        hospitalAdminPasswordField = new javax.swing.JTextField();
        loginButton = new javax.swing.JButton();
        hospitalAdminPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        hospitalTable = new javax.swing.JTable();
        updateFilterBox = new javax.swing.JComboBox<>();
        updateFieldText = new javax.swing.JTextField();
        updateHospital = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        hospNumberField = new javax.swing.JTextField();
        hospStreetNameField = new javax.swing.JTextField();
        hospZIPCodeField = new javax.swing.JTextField();
        hospCommunityBox = new javax.swing.JComboBox<>();
        hospCityBox = new javax.swing.JComboBox<>();
        createHospital = new javax.swing.JButton();
        manageDoctors = new javax.swing.JButton();
        popCommunityButton = new javax.swing.JButton();
        logOutButton = new javax.swing.JButton();
        manageDoctorPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        manageDoctorTable = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        managePersonTable = new javax.swing.JTable();
        assignDoctor = new javax.swing.JButton();
        hospitalNumbers = new javax.swing.JComboBox<>();
        backButton = new javax.swing.JButton();

        setLayout(new java.awt.CardLayout());

        hospitalAdminLoginPanel.setBackground(new java.awt.Color(251, 243, 250));

        hospitalAdminIDText.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        hospitalAdminIDText.setText("Hospital Admin ID:");

        hospitalAdminPasswordText.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        hospitalAdminPasswordText.setText("Password:");

        loginButton.setText("Login");
        loginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout hospitalAdminLoginPanelLayout = new javax.swing.GroupLayout(hospitalAdminLoginPanel);
        hospitalAdminLoginPanel.setLayout(hospitalAdminLoginPanelLayout);
        hospitalAdminLoginPanelLayout.setHorizontalGroup(
            hospitalAdminLoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
            .addGroup(hospitalAdminLoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(hospitalAdminLoginPanelLayout.createSequentialGroup()
                    .addGap(73, 73, 73)
                    .addGroup(hospitalAdminLoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(hospitalAdminIDText, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(hospitalAdminPasswordText, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                    .addGroup(hospitalAdminLoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(hospitalAdminIDField, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(hospitalAdminPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(loginButton, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(73, 73, 73)))
        );
        hospitalAdminLoginPanelLayout.setVerticalGroup(
            hospitalAdminLoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
            .addGroup(hospitalAdminLoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(hospitalAdminLoginPanelLayout.createSequentialGroup()
                    .addGap(206, 206, 206)
                    .addGroup(hospitalAdminLoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(hospitalAdminIDField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(hospitalAdminIDText))
                    .addGap(18, 18, 18)
                    .addGroup(hospitalAdminLoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(hospitalAdminPasswordText)
                        .addComponent(hospitalAdminPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(100, 100, 100)
                    .addComponent(loginButton)
                    .addContainerGap(207, Short.MAX_VALUE)))
        );

        add(hospitalAdminLoginPanel, "card4");

        hospitalAdminPanel.setBackground(new java.awt.Color(251, 243, 250));

        hospitalTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "HospitalNumber", "StreetName", "ZIPCode", "Community", "City", "Doctors"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(hospitalTable);
        if (hospitalTable.getColumnModel().getColumnCount() > 0) {
            hospitalTable.getColumnModel().getColumn(4).setHeaderValue("City");
        }

        updateFilterBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "streetName", "ZIPCode" }));

        updateHospital.setText("Update Details");
        updateHospital.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateHospitalActionPerformed(evt);
            }
        });

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel1.setText("Hospital Number:");

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel2.setText("Street Name:");

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel3.setText("ZIP Code:");

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel4.setText("Community:");

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel5.setText("City:");

        hospZIPCodeField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hospZIPCodeFieldActionPerformed(evt);
            }
        });

        hospCommunityBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        hospCommunityBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hospCommunityBoxActionPerformed(evt);
            }
        });

        hospCityBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        hospCityBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hospCityBoxActionPerformed(evt);
            }
        });

        createHospital.setText("Create New Hospital");
        createHospital.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createHospitalActionPerformed(evt);
            }
        });

        manageDoctors.setText("Manage Doctor");
        manageDoctors.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manageDoctorsActionPerformed(evt);
            }
        });

        popCommunityButton.setText("Pop Community");
        popCommunityButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popCommunityButtonActionPerformed(evt);
            }
        });

        logOutButton.setText("Logout");
        logOutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logOutButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout hospitalAdminPanelLayout = new javax.swing.GroupLayout(hospitalAdminPanel);
        hospitalAdminPanel.setLayout(hospitalAdminPanelLayout);
        hospitalAdminPanelLayout.setHorizontalGroup(
            hospitalAdminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(hospitalAdminPanelLayout.createSequentialGroup()
                .addGroup(hospitalAdminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(hospitalAdminPanelLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(hospitalAdminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, hospitalAdminPanelLayout.createSequentialGroup()
                                .addComponent(updateFilterBox, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(updateFieldText, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(updateHospital, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(60, 60, 60))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, hospitalAdminPanelLayout.createSequentialGroup()
                                .addComponent(createHospital, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(70, 70, 70)
                                .addComponent(popCommunityButton, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(hospitalAdminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(hospitalAdminPanelLayout.createSequentialGroup()
                            .addGap(25, 25, 25)
                            .addGroup(hospitalAdminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 550, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(hospitalAdminPanelLayout.createSequentialGroup()
                                    .addGroup(hospitalAdminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(hospitalAdminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(hospitalAdminPanelLayout.createSequentialGroup()
                                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(hospStreetNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(hospitalAdminPanelLayout.createSequentialGroup()
                                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(hospZIPCodeField)))
                                        .addGroup(hospitalAdminPanelLayout.createSequentialGroup()
                                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(hospNumberField, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGap(26, 26, 26)
                                    .addGroup(hospitalAdminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(hospitalAdminPanelLayout.createSequentialGroup()
                                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(hospCommunityBox, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(hospitalAdminPanelLayout.createSequentialGroup()
                                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(hospCityBox, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                        .addGroup(hospitalAdminPanelLayout.createSequentialGroup()
                            .addGap(235, 235, 235)
                            .addComponent(manageDoctors, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(25, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, hospitalAdminPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(logOutButton)
                .addContainerGap())
        );
        hospitalAdminPanelLayout.setVerticalGroup(
            hospitalAdminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(hospitalAdminPanelLayout.createSequentialGroup()
                .addGap(80, 80, 80)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(hospitalAdminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updateHospital)
                    .addComponent(updateFieldText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updateFilterBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addGroup(hospitalAdminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(hospitalAdminPanelLayout.createSequentialGroup()
                        .addGroup(hospitalAdminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(hospNumberField)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(hospitalAdminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(hospStreetNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(13, 13, 13)
                        .addGroup(hospitalAdminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(hospZIPCodeField))
                        .addGap(18, 18, 18)
                        .addComponent(createHospital)
                        .addGap(40, 40, 40)
                        .addComponent(manageDoctors)
                        .addGap(40, 40, 40))
                    .addGroup(hospitalAdminPanelLayout.createSequentialGroup()
                        .addGroup(hospitalAdminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(hospitalAdminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(hospCommunityBox)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(hospitalAdminPanelLayout.createSequentialGroup()
                                .addGap(35, 35, 35)
                                .addGroup(hospitalAdminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(hospCityBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(18, 18, 18)
                        .addComponent(popCommunityButton)
                        .addGap(91, 91, 91)
                        .addComponent(logOutButton)
                        .addContainerGap())))
        );

        add(hospitalAdminPanel, "card2");

        manageDoctorPanel.setBackground(new java.awt.Color(251, 243, 250));

        manageDoctorTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "DoctorID", "Name", "Age", "Community", "Contact"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(manageDoctorTable);

        managePersonTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Name", "BirthDate", "Community", "Contact"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(managePersonTable);

        assignDoctor.setText("Assign Doctor");
        assignDoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignDoctorActionPerformed(evt);
            }
        });

        hospitalNumbers.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout manageDoctorPanelLayout = new javax.swing.GroupLayout(manageDoctorPanel);
        manageDoctorPanel.setLayout(manageDoctorPanelLayout);
        manageDoctorPanelLayout.setHorizontalGroup(
            manageDoctorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageDoctorPanelLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(manageDoctorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(backButton)
                    .addGroup(manageDoctorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 550, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 550, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(manageDoctorPanelLayout.createSequentialGroup()
                            .addComponent(assignDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(hospitalNumbers, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(25, Short.MAX_VALUE))
        );
        manageDoctorPanelLayout.setVerticalGroup(
            manageDoctorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageDoctorPanelLayout.createSequentialGroup()
                .addGap(80, 80, 80)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(manageDoctorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(assignDoctor)
                    .addComponent(hospitalNumbers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 154, Short.MAX_VALUE)
                .addComponent(backButton)
                .addContainerGap())
        );

        add(manageDoctorPanel, "card4");
    }// </editor-fold>//GEN-END:initComponents

    private void createHospitalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createHospitalActionPerformed
        // TODO add your handling code here:
        
        hospitalNumber = Integer.parseInt(hospNumberField.getText());
        boolean hospitalNumberCheck = false;
        for (Community c: city.getCommunityList()){
            for (Hospital h: c.getHospitalList()){
                if(h.getHospitalNumber() == hospitalNumber){
                    JOptionPane.showMessageDialog(this,"This Hospital Already Exist");
                    hospitalNumberCheck = true;
                }
            }
        }
        if(!hospitalNumberCheck){
            hospitalStreetName = hospStreetNameField.getText().toString();
            hospitalZIPCode = Long.parseLong(hospZIPCodeField.getText());
            hospitalCommunity = hospCommunityBox.getSelectedItem().toString();
            hospitalCity = hospCityBox.getSelectedItem().toString();
            
            hospitalDirectory.createNewHospital(hospitalNumber, hospitalStreetName, hospitalCommunity, hospitalCity);
            for(City c: newSystem.getCityList()){
                for(Community com: c.getCommunityList()){
                    if(com.getCommunityName() == hospitalCommunity){
                        community = com;
                    }
                }
            }
            community.createNewHospital(hospitalNumber, hospitalStreetName, hospitalCommunity, hospitalCity);
            populateHospitalTable();
            JOptionPane.showMessageDialog(this, "New Hospital has been added to the " + String.valueOf(hospitalCommunity) + "Community with Hospital ID" + hospitalNumber);

            hospNumberField.setText("");
            hospStreetNameField.setText("");
            hospZIPCodeField.setText("");
            hospCommunityBox.setSelectedItem("");
            hospCityBox.setSelectedItem("");
        }
    }//GEN-LAST:event_createHospitalActionPerformed

    private void hospCityBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hospCityBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_hospCityBoxActionPerformed

    private void hospCommunityBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hospCommunityBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_hospCommunityBoxActionPerformed

    private void hospZIPCodeFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hospZIPCodeFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_hospZIPCodeFieldActionPerformed

    private void updateHospitalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateHospitalActionPerformed
        // TODO add your handling code here:
        
        if(hospitalTable.getSelectedRow()<0){
            JOptionPane.showMessageDialog(this, "Please Select a row !!");
        }
        else{
            int hospitalID = (int)hospitalTableModel.getValueAt(hospitalTable.getSelectedRow(), 0);
            inpUpdate = updateFieldText.getText().toString();
            for(Community c: city.getCommunityList()){
                for(Hospital h: c.getHospitalList()){
                    if(hospitalID == h.getHospitalNumber()){
                        hospital = h;
                    }
                }
            }
            String updateFilter = updateFilterBox.getSelectedItem().toString();
            if(updateFilter == " "){
                JOptionPane.showMessageDialog(this, "");
            }
            else{
                if(updateFilter == "streetName"){
                    String hospUpdate = inpUpdate;
                    hospital.setHospitalStreetName(hospUpdate);
                    populateHospitalTable();
                }
                if(updateFilter == "ZIPCode"){
                    int hospUpdate = Integer.parseInt(inpUpdate);
                    hospital.setHospitalZIPCode(hospUpdate);
                    populateHospitalTable();
                }
            }
        }
    }//GEN-LAST:event_updateHospitalActionPerformed

    private void manageDoctorsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manageDoctorsActionPerformed
        // TODO add your handling code here:
        hospitalAdminPanel.setVisible(false);
        manageDoctorPanel.setVisible(true);
        populateManageTable();
        hospitalNumbers.removeAllItems();
        for(Community c: city.getCommunityList()){
            for(Hospital h: c.getHospitalList()){
                hospNumbers.add(h.getHospitalNumber());
            }
        }
        for(int s: hospNumbers){
            hospitalNumbers.addItem(String.valueOf(s));
        }
    }//GEN-LAST:event_manageDoctorsActionPerformed

    private void popCommunityButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popCommunityButtonActionPerformed
        // TODO add your handling code here:
        hospCommunityBox.removeAllItems();
        String communityCity = String.valueOf(hospCityBox.getSelectedItem());
        for(City c: newSystem.getCityList()){
            if(communityCity == c.getCityName()){
                for(Community com: c.getCommunityList()){
                    hospCommunityBox.addItem(com.getCommunityName());
                }
            }
        }
    }//GEN-LAST:event_popCommunityButtonActionPerformed

    private void assignDoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignDoctorActionPerformed
        // TODO add your handling code here:
        
        if(managePersonTable.getSelectedRow()<0){
            JOptionPane.showMessageDialog(this, "Please select a person to add");
        }
        if(hospitalNumbers.getSelectedItem() == null){
            JOptionPane.showMessageDialog(this, "Please select a hospital to add doctor");
        }
        else{
            long personNumber = (long)managePersonModel.getValueAt(managePersonTable.getSelectedRow(),3);
            for(Person p : personDirectory.getPersonList()){
                if(personNumber == p.getPersonCellPhoneNumber()){
                    selectedPerson = p;
                }
            }
            for(Hospital h : hospitalDirectory.getHospitalList()){
                if(Integer.parseInt((String)hospitalNumbers.getSelectedItem()) == h.getHospitalNumber()){
                    selectedHospital = h;
                }
            }
            boolean doctorCheck = false;
            for(Patient p: patientDirectory.getPatientList()){
                if(p.matchByContact(selectedPerson.getPersonCellPhoneNumber())){
                    JOptionPane.showMessageDialog(this, "This Person is a Patient and cannot become Doctor");
                    doctorCheck = true;
                }
            }
            if(!doctorCheck){
                Doctor new_doc = selectedHospital.addDoctorToHospital(new Doctor(selectedPerson));
                doctorDirectory.addNewDoctor(new_doc);
                JOptionPane.showMessageDialog(this, "Added " + selectedPerson.getPersonName() + " to Hospital !!!");
                doctorCheck = false;
            }
        }
        populateManageTable();
    }//GEN-LAST:event_assignDoctorActionPerformed

    private void loginButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginButtonActionPerformed
        // TODO add your handling code here:
        if(parser.isLong(hospitalAdminIDField.getText()) && !parser.checkNull(hospitalAdminIDField.getText())){
            long hospitalAdminIDCred = Long.parseLong(hospitalAdminIDField.getText());
            if(!parser.checkNull(hospitalAdminPasswordField.getText())){
                String hospitalAdminPassCred = String.valueOf(hospitalAdminPasswordField.getText());
                long hAIC = Long.parseLong("1234");
                String hAPC = "HospitalAdmin1234";

                if(hAIC == hospitalAdminIDCred && (hAPC == null ? hospitalAdminPassCred == null : String.valueOf(hAPC).equals(hospitalAdminPassCred))){
                    hospitalAdminLoggedIn = true;
                }
                if(hospitalAdminLoggedIn){
                    hospitalAdminLoginPanel.setVisible(false);
                    hospitalAdminPanel.setVisible(true);
                }
                else{
                    JOptionPane.showMessageDialog(this, "Please Log In First");
                }
            }
            else{
                JOptionPane.showMessageDialog(this, "Password should not be null");
            }
        }
        else {
            JOptionPane.showMessageDialog(this, "Patient ID should be Long and not null");
        }
    }//GEN-LAST:event_loginButtonActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
        manageDoctorPanel.setVisible(false);
        hospitalAdminPanel.setVisible(true);
        populateHospitalTable();
    }//GEN-LAST:event_backButtonActionPerformed

    private void logOutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logOutButtonActionPerformed
        // TODO add your handling code here:
        hospitalAdminPanel.setVisible(false);
        hospitalAdminLoginPanel.setVisible(true);
    }//GEN-LAST:event_logOutButtonActionPerformed

    public void populateHospitalTable(){
        hospitalTableModel.setRowCount(0);
        for(Community c: city.getCommunityList()){
            for(Hospital h: c.getHospitalList()){
                Object[] row = new Object[6];
                row[0] = h.getHospitalNumber();
                row[1] = h.getHospitalStreetName();
                row[2] = h.getHospitalZIPCode();
                row[3] = h.getHospitalCommunity();
                row[4] = h.getHospitalCity();
                row[5] = (h.getDoctorInHospital().size());
                hospitalTableModel.addRow(row);
            }
        }
    }
    
    public void populateManageTable(){
        manageDoctorModel.setRowCount(0);
        managePersonModel.setRowCount(0);
        
        long[] doctorCountNumber = new long[doctorDirectory.getDoctorList().size()];
        
        for(int i=0; i<(doctorDirectory.getDoctorList()).size(); i++){
            doctorCountNumber[i] = doctorDirectory.getDoctorList().get(i).getPerson().getPersonCellPhoneNumber();
        }
        for (Person p : personDirectory.getPersonList()) {
            boolean a = true;
            for(long i : doctorCountNumber){
                if(i == p.getPersonCellPhoneNumber()){
                    a = false;
                }
            }
            if(a == true){
                Object[] row = new Object[4];
                row[0] = p.getPersonName();
                row[1] = p.getPersonDOB();
                row[2] = p.getPersonCommunity();
                row[3] = p.getPersonCellPhoneNumber();
                managePersonModel.addRow(row);
                a = true;
            }
        }
        for(Doctor d: doctorDirectory.getDoctorList()){
            Object[] row = new Object[5];
            row[0] = d.getDoctorID();
            row[1] = d.getPerson().getPersonName();
            row[2] = d.getPerson().getPersonAge();
            row[3] = d.getPerson().getPersonCommunity();
            row[4] = d.getPerson().getPersonCellPhoneNumber();
            manageDoctorModel.addRow(row);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assignDoctor;
    private javax.swing.JButton backButton;
    private javax.swing.JButton createHospital;
    private javax.swing.JComboBox<String> hospCityBox;
    private javax.swing.JComboBox<String> hospCommunityBox;
    private javax.swing.JTextField hospNumberField;
    private javax.swing.JTextField hospStreetNameField;
    private javax.swing.JTextField hospZIPCodeField;
    private javax.swing.JTextField hospitalAdminIDField;
    private javax.swing.JLabel hospitalAdminIDText;
    private javax.swing.JPanel hospitalAdminLoginPanel;
    private javax.swing.JPanel hospitalAdminPanel;
    private javax.swing.JTextField hospitalAdminPasswordField;
    private javax.swing.JLabel hospitalAdminPasswordText;
    private javax.swing.JComboBox<String> hospitalNumbers;
    private javax.swing.JTable hospitalTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton logOutButton;
    private javax.swing.JButton loginButton;
    private javax.swing.JPanel manageDoctorPanel;
    private javax.swing.JTable manageDoctorTable;
    private javax.swing.JButton manageDoctors;
    private javax.swing.JTable managePersonTable;
    private javax.swing.JButton popCommunityButton;
    private javax.swing.JTextField updateFieldText;
    private javax.swing.JComboBox<String> updateFilterBox;
    private javax.swing.JButton updateHospital;
    // End of variables declaration//GEN-END:variables
}
