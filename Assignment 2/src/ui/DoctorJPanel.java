/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */

package ui;

import Parser.Parser;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Community;
import model.Doctor;
import model.DoctorDirectory;
import model.Encounter;
import model.Patient;
import model.PatientDirectory;
import model.VitalSigns;

/**
 *
 * @author meetdoshi
 */
public class DoctorJPanel extends javax.swing.JPanel {

    /**
     * Creates new form DoctorJPanel
     */
    
    PatientDirectory patientDirectory;
    DoctorDirectory doctorDirectory;
    ArrayList<Doctor> doctorList;
    ArrayList<Patient> patientList;
    DefaultTableModel personADirModel;
    DefaultTableModel personVDirModel;
    DefaultTableModel encounterModel;
    Patient patientAdd;
    Patient patientView;
    Parser parser = new Parser();
    boolean doctorloggedIN = false;
    Patient selectedPatient;
    String doctorCommunity = "";
    Community community;
    Doctor doctor;
    ArrayList<Patient> patientInDoctor;
    float bloodPressure, heartRate, weight;
    
    public DoctorJPanel() {
        initComponents();
    }
    
    public DoctorJPanel(PatientDirectory patientDirectory, DoctorDirectory doctorDirectory) {
        initComponents();
        this.patientDirectory = patientDirectory;
        this.doctorDirectory = doctorDirectory;
        patientList = patientDirectory.getPatientList();
        doctorList = doctorDirectory.getDoctorList();
        
        doctorLoginPanel.setVisible(true);
        
        personADirModel = (DefaultTableModel) patientCreateTable.getModel();
        personADirModel.setRowCount(0);
        
        personVDirModel = (DefaultTableModel) patientViewTable.getModel();
        personVDirModel.setRowCount(0);
        
        for(Patient p: patientList){
            Object[] row = new Object[4];
            row[0]= p.getPatientID();
            row[1]= p.getPerson().getPersonName();
            row[2]= p.getPerson().getPersonAge();
            row[3]= p.getPerson().getPersonCommunity();
            
            personADirModel.addRow(row);
            personVDirModel.addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        doctorLoginPanel = new javax.swing.JPanel();
        doctorIDText = new javax.swing.JLabel();
        doctorIDField = new javax.swing.JTextField();
        doctorPasswordText = new javax.swing.JLabel();
        doctorPasswordField = new javax.swing.JTextField();
        loginButton = new javax.swing.JButton();
        doctorPanel = new javax.swing.JPanel();
        doctorTabPane = new javax.swing.JTabbedPane();
        newEncounter = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        patientCreateTable = new javax.swing.JTable();
        bloodPressureText = new javax.swing.JLabel();
        BPInput = new javax.swing.JTextField();
        heartRateText = new javax.swing.JLabel();
        HRInput = new javax.swing.JTextField();
        weightText = new javax.swing.JLabel();
        weightInput = new javax.swing.JTextField();
        symptomsText = new javax.swing.JLabel();
        symptomsInput = new javax.swing.JTextField();
        addVitalsButton = new javax.swing.JButton();
        logOutButton = new javax.swing.JButton();
        previousEncounter = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        patientViewTable = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        encounterTable = new javax.swing.JTable();
        viewEncounterButton = new javax.swing.JButton();

        setLayout(new java.awt.CardLayout());

        doctorLoginPanel.setBackground(new java.awt.Color(235, 211, 207));

        doctorIDText.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        doctorIDText.setText("Doctor ID:");

        doctorPasswordText.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        doctorPasswordText.setText("Password:");

        loginButton.setText("Login");
        loginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout doctorLoginPanelLayout = new javax.swing.GroupLayout(doctorLoginPanel);
        doctorLoginPanel.setLayout(doctorLoginPanelLayout);
        doctorLoginPanelLayout.setHorizontalGroup(
            doctorLoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, doctorLoginPanelLayout.createSequentialGroup()
                .addGap(107, 107, 107)
                .addGroup(doctorLoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(doctorIDText, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(doctorPasswordText, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                .addGroup(doctorLoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(doctorIDField, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(doctorPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(loginButton, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39))
        );
        doctorLoginPanelLayout.setVerticalGroup(
            doctorLoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(doctorLoginPanelLayout.createSequentialGroup()
                .addGap(150, 150, 150)
                .addGroup(doctorLoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(doctorIDField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(doctorIDText))
                .addGap(18, 18, 18)
                .addGroup(doctorLoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(doctorPasswordText)
                    .addComponent(doctorPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(100, 100, 100)
                .addComponent(loginButton)
                .addContainerGap(263, Short.MAX_VALUE))
        );

        add(doctorLoginPanel, "card3");

        doctorPanel.setBackground(new java.awt.Color(235, 211, 207));
        doctorPanel.setPreferredSize(new java.awt.Dimension(600, 600));

        doctorTabPane.setBackground(new java.awt.Color(235, 211, 207));

        newEncounter.setBackground(new java.awt.Color(235, 211, 207));

        patientCreateTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Name", "PatientID", "PatientAge", "PatientCommunity"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(patientCreateTable);

        bloodPressureText.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        bloodPressureText.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        bloodPressureText.setText("Blood Pressure:");

        heartRateText.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        heartRateText.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        heartRateText.setText("Heart Rate:");

        weightText.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        weightText.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        weightText.setText("Weight:");

        symptomsText.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        symptomsText.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        symptomsText.setText("Symptoms:");

        addVitalsButton.setText("Add New Vitals");
        addVitalsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addVitalsButtonActionPerformed(evt);
            }
        });

        logOutButton.setText("Logout");
        logOutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logOutButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout newEncounterLayout = new javax.swing.GroupLayout(newEncounter);
        newEncounter.setLayout(newEncounterLayout);
        newEncounterLayout.setHorizontalGroup(
            newEncounterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(newEncounterLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(newEncounterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(newEncounterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, newEncounterLayout.createSequentialGroup()
                            .addComponent(heartRateText, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(30, 30, 30)
                            .addComponent(HRInput, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, newEncounterLayout.createSequentialGroup()
                            .addComponent(bloodPressureText, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(30, 30, 30)
                            .addComponent(BPInput, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, newEncounterLayout.createSequentialGroup()
                            .addComponent(weightText, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(30, 30, 30)
                            .addComponent(weightInput, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(newEncounterLayout.createSequentialGroup()
                            .addComponent(symptomsText, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(30, 30, 30)
                            .addComponent(symptomsInput, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 520, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(newEncounterLayout.createSequentialGroup()
                        .addGap(160, 160, 160)
                        .addComponent(addVitalsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(40, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, newEncounterLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(logOutButton)
                .addContainerGap())
        );
        newEncounterLayout.setVerticalGroup(
            newEncounterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(newEncounterLayout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addGroup(newEncounterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BPInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bloodPressureText, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(newEncounterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(HRInput)
                    .addComponent(heartRateText, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(newEncounterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(weightInput)
                    .addComponent(weightText, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(newEncounterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(symptomsText, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(symptomsInput, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addComponent(addVitalsButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 78, Short.MAX_VALUE)
                .addComponent(logOutButton)
                .addContainerGap())
        );

        doctorTabPane.addTab("New Encounter", newEncounter);

        previousEncounter.setBackground(new java.awt.Color(235, 211, 207));

        patientViewTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Name", "PatientID", "PatientAge", "PatientCommunity"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(patientViewTable);

        encounterTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Name", "PatientID", "EncounterID", "BloodPressure", "HeartRate", "Weight"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(encounterTable);

        viewEncounterButton.setText("View Previous Encounters");
        viewEncounterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewEncounterButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout previousEncounterLayout = new javax.swing.GroupLayout(previousEncounter);
        previousEncounter.setLayout(previousEncounterLayout);
        previousEncounterLayout.setHorizontalGroup(
            previousEncounterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(previousEncounterLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(previousEncounterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 520, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 520, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, previousEncounterLayout.createSequentialGroup()
                .addContainerGap(201, Short.MAX_VALUE)
                .addComponent(viewEncounterButton, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(199, 199, 199))
        );
        previousEncounterLayout.setVerticalGroup(
            previousEncounterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(previousEncounterLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 90, Short.MAX_VALUE)
                .addComponent(viewEncounterButton)
                .addGap(88, 88, 88)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
        );

        doctorTabPane.addTab("Previous Encounters", previousEncounter);

        javax.swing.GroupLayout doctorPanelLayout = new javax.swing.GroupLayout(doctorPanel);
        doctorPanel.setLayout(doctorPanelLayout);
        doctorPanelLayout.setHorizontalGroup(
            doctorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
            .addGroup(doctorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(doctorPanelLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(doctorTabPane, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        doctorPanelLayout.setVerticalGroup(
            doctorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
            .addGroup(doctorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(doctorPanelLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(doctorTabPane, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        add(doctorPanel, "card3");
    }// </editor-fold>//GEN-END:initComponents

    private void viewEncounterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewEncounterButtonActionPerformed
        // TODO add your handling code here:
        encounterModel = (DefaultTableModel) encounterTable.getModel();
        encounterModel.setRowCount(0);
        
        long patientID = (long)personVDirModel.getValueAt(patientViewTable.getSelectedRow(), 1);
        patientList = patientDirectory.getPatientList();
        for(Patient p: patientList){
            if(patientID == p.getPatientID()){
                selectedPatient = p;
            }
        }
        for(Encounter e: selectedPatient.getPatientEncounterHistory()){
            Object[] row = new Object[6];
            row[0] = selectedPatient.getPerson().getPersonName();
            row[1] = selectedPatient.getPatientID();
            row[2] = e.getEncounterID();
            row[3] = e.getVitals().getBloodPressure();
            row[4] = e.getVitals().getHeartRate();
            row[5] = e.getVitals().getWeight();
            encounterModel.addRow(row);
        }
    }//GEN-LAST:event_viewEncounterButtonActionPerformed

    private void addVitalsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addVitalsButtonActionPerformed
        // TODO add your handling code here:
        
        int counter = 0;
        if(patientCreateTable.getSelectedRow()<0){
                JOptionPane.showMessageDialog(this, "Please select a Patient");
        }
        else{
            long patientIDCheck= (long)personADirModel.getValueAt(patientCreateTable.getSelectedRow(), 1);
            for(Patient i: patientList){
                if(patientIDCheck == i.getPatientID()){
                    patientAdd = i;
                }
            }
            if(!parser.isInteger(BPInput.getText()) && !parser.checkNull(BPInput.getText())){ 
                JOptionPane.showMessageDialog(this, "Please input Blood Pressure correctly !!"); 
            }
            else{
                bloodPressure = Float.parseFloat(BPInput.getText());
                counter++;
            }
            if(!parser.isInteger(HRInput.getText()) && !parser.checkNull(HRInput.getText())){ 
                JOptionPane.showMessageDialog(this, "Please input Heart Rate correctly !!"); 
            }
            else{
                heartRate = Float.parseFloat(HRInput.getText());
                counter++;
            }
            if(!parser.isInteger(weightInput.getText()) && !parser.checkNull(weightInput.getText())){ 
                JOptionPane.showMessageDialog(this, "Please input Weight correctly !!"); 
            }
            else{
                weight = Float.parseFloat(weightInput.getText());
                counter++;
            }
            String symptoms = symptomsInput.getText();
            
            if(counter ==3){
                patientAdd.getEncounterHistory().addNewEncounter(new VitalSigns(bloodPressure, heartRate, weight, symptoms));
                JOptionPane.showMessageDialog(this, "Visit saved successfully!");
                BPInput.setText("");
                HRInput.setText("");
                weightInput.setText("");
                symptomsInput.setText("");
            }
        }
    }//GEN-LAST:event_addVitalsButtonActionPerformed

    private void loginButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginButtonActionPerformed
        // TODO add your handling code here:
        if(parser.isLong(doctorIDField.getText()) && !parser.checkNull(doctorIDField.getText())){
            long doctorIDCred = Long.parseLong(doctorIDField.getText());
            if(!parser.checkNull(doctorPasswordField.getText())){
                String doctorPassCred = String.valueOf(doctorPasswordField.getText());
                for(Doctor d: doctorDirectory.getDoctorList()){
                    if(d.getDoctorID() == doctorIDCred && (d.getDoctorPassword() == null ? doctorPassCred == null : d.getDoctorPassword().equals(doctorPassCred))){
                        doctorloggedIN = true;
                    }
                }
                if(doctorloggedIN){
                    doctorLoginPanel.setVisible(false);
                    doctorPanel.setVisible(true);
                    
                    doctorList = doctorDirectory.getDoctorList();
                    for(int i = 0; i < doctorList.size();i++){
                        if(doctorIDCred == doctorList.get(i).getDoctorID()){
                            doctor = doctorList.get(i);
                        }
                    }
                    populatePatientTable();
                }
                else{
                    JOptionPane.showMessageDialog(this, "Please Log In First");
                }
            }
            else{
                JOptionPane.showMessageDialog(this, "Password should not be null");
            }
        }
        else {
            JOptionPane.showMessageDialog(this, "Doctor ID should be Long and not null");
        }
    }//GEN-LAST:event_loginButtonActionPerformed

    private void logOutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logOutButtonActionPerformed
        // TODO add your handling code here:
        doctorPanel.setVisible(false);
        doctorLoginPanel.setVisible(true);
    }//GEN-LAST:event_logOutButtonActionPerformed

    public void populatePatientTable(){
        personADirModel = (DefaultTableModel) patientCreateTable.getModel();
        personADirModel.setRowCount(0);
        
        personVDirModel = (DefaultTableModel) patientViewTable.getModel();
        personVDirModel.setRowCount(0);
        
        for(Patient p: doctor.getPatientToDoctor()){
            Object[] row = new Object[4];
            row[0] = p.getPerson().getPersonName();
            row[1] = p.getPatientID();
            row[2] = p.getPerson().getPersonAge();
            row[3] = p.getPerson().getPersonCommunity();
            personADirModel.addRow(row);
            personVDirModel.addRow(row);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField BPInput;
    private javax.swing.JTextField HRInput;
    private javax.swing.JButton addVitalsButton;
    private javax.swing.JLabel bloodPressureText;
    private javax.swing.JTextField doctorIDField;
    private javax.swing.JLabel doctorIDText;
    private javax.swing.JPanel doctorLoginPanel;
    private javax.swing.JPanel doctorPanel;
    private javax.swing.JTextField doctorPasswordField;
    private javax.swing.JLabel doctorPasswordText;
    private javax.swing.JTabbedPane doctorTabPane;
    private javax.swing.JTable encounterTable;
    private javax.swing.JLabel heartRateText;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton logOutButton;
    private javax.swing.JButton loginButton;
    private javax.swing.JPanel newEncounter;
    private javax.swing.JTable patientCreateTable;
    private javax.swing.JTable patientViewTable;
    private javax.swing.JPanel previousEncounter;
    private javax.swing.JTextField symptomsInput;
    private javax.swing.JLabel symptomsText;
    private javax.swing.JButton viewEncounterButton;
    private javax.swing.JTextField weightInput;
    private javax.swing.JLabel weightText;
    // End of variables declaration//GEN-END:variables
}
