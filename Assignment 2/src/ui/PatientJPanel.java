/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */

package ui;

import Parser.Parser;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.City;
import model.Community;
import model.Doctor;
import model.DoctorDirectory;
import model.Encounter;
import model.Hospital;
import model.HospitalDirectory;
import model.Patient;
import model.PatientDirectory;
import model.Person;

/**
 *
 * @author meetdoshi
 */

public class PatientJPanel extends javax.swing.JPanel {

    /**
     * Creates new form PatientJPanel
     */
    
    Community newCommunity = new Community();
    Patient patient = new Patient();
    ArrayList<Community> communityList;
    ArrayList<Patient> patientList;
    Parser parser = new Parser();
    PatientDirectory patientDirectory; 
    Hospital newHospital;
    ArrayList<Doctor> doctorList;
    String patientCommunity = "";
    City city;
    Community community;
    HospitalDirectory hospitalDirectory;
    DoctorDirectory doctorDirectory;
    Doctor doctor;
    Hospital hospital;
    boolean patientLoggedIn = false;
    Patient patientDoctor;
    Doctor doctorPatient;
    Patient selectedPatient;
    
    ArrayList<Hospital> hospitalArray;
    
    public PatientJPanel() {
        initComponents();
    }
    
    public PatientJPanel(DoctorDirectory doctorDirectory, String[] communityList, PatientDirectory patientDirectory, Hospital newHospital, City city, HospitalDirectory hospitalDirectory){
        initComponents();
        this.patientDirectory = patientDirectory;
        this.newHospital = newHospital;
        this.city = city;
        this.hospitalDirectory = hospitalDirectory;
        this.doctorDirectory = doctorDirectory;
        
        patientLoginPanel.setVisible(true);
        
        doctorCommunityDropbox.removeAllItems();
        for(Community community: city.getCommunityList()){
            doctorCommunityDropbox.addItem(community.getCommunityName());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        patientLoginPanel = new javax.swing.JPanel();
        patientIDField = new javax.swing.JTextField();
        patientIDText = new javax.swing.JLabel();
        patientPasswordText = new javax.swing.JLabel();
        patientPasswordField = new javax.swing.JTextField();
        loginButton = new javax.swing.JButton();
        guestLoginButton = new javax.swing.JButton();
        patientPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        doctorTable = new javax.swing.JTable();
        viewDoctor = new javax.swing.JButton();
        doctorName = new javax.swing.JTextField();
        doctorID = new javax.swing.JTextField();
        doctorCommunity = new javax.swing.JTextField();
        doctorHospitalName = new javax.swing.JTextField();
        doctorNameText = new javax.swing.JLabel();
        doctorIDText = new javax.swing.JLabel();
        doctorCommunityText = new javax.swing.JLabel();
        doctorHospitalNumberText = new javax.swing.JLabel();
        doctorAppointment = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        encounterTable = new javax.swing.JTable();
        viewEncounter = new javax.swing.JButton();
        guestPersonPanel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        guestDoctorTable = new javax.swing.JTable();
        communityText = new javax.swing.JLabel();
        doctorCommunityDropbox = new javax.swing.JComboBox<>();
        searchButton = new javax.swing.JButton();

        setLayout(new java.awt.CardLayout());

        patientLoginPanel.setBackground(new java.awt.Color(235, 195, 186));

        patientIDText.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        patientIDText.setText("Patient ID:");

        patientPasswordText.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        patientPasswordText.setText("Password:");

        loginButton.setText("Login");
        loginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginButtonActionPerformed(evt);
            }
        });

        guestLoginButton.setText("Guest Login");
        guestLoginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guestLoginButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout patientLoginPanelLayout = new javax.swing.GroupLayout(patientLoginPanel);
        patientLoginPanel.setLayout(patientLoginPanelLayout);
        patientLoginPanelLayout.setHorizontalGroup(
            patientLoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, patientLoginPanelLayout.createSequentialGroup()
                .addGap(107, 107, 107)
                .addGroup(patientLoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(patientIDText, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(patientPasswordText, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                .addGroup(patientLoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(patientIDField, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(patientPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(patientLoginPanelLayout.createSequentialGroup()
                        .addComponent(loginButton, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(guestLoginButton, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(39, 39, 39))
        );
        patientLoginPanelLayout.setVerticalGroup(
            patientLoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(patientLoginPanelLayout.createSequentialGroup()
                .addGap(150, 150, 150)
                .addGroup(patientLoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(patientIDField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(patientIDText))
                .addGap(18, 18, 18)
                .addGroup(patientLoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(patientPasswordText)
                    .addComponent(patientPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(100, 100, 100)
                .addGroup(patientLoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loginButton)
                    .addComponent(guestLoginButton))
                .addContainerGap(263, Short.MAX_VALUE))
        );

        add(patientLoginPanel, "card2");

        patientPanel.setBackground(new java.awt.Color(235, 195, 186));

        doctorTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Name", "DoctorID", "Community", "HospitalNumber"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(doctorTable);

        viewDoctor.setText("View");
        viewDoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewDoctorActionPerformed(evt);
            }
        });

        doctorNameText.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        doctorNameText.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        doctorNameText.setText("Doctor Name:");

        doctorIDText.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        doctorIDText.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        doctorIDText.setText("Doctor ID:");

        doctorCommunityText.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        doctorCommunityText.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        doctorCommunityText.setText("Doctor Community:");

        doctorHospitalNumberText.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        doctorHospitalNumberText.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        doctorHospitalNumberText.setText("Doctor Hospital Number:");

        doctorAppointment.setText("Make an Appointment");
        doctorAppointment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doctorAppointmentActionPerformed(evt);
            }
        });

        encounterTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "EncounterID", "LastVisitDate", "BloodPressure", "HeartRate", "Symptoms"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(encounterTable);

        viewEncounter.setText("View Encounter");
        viewEncounter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewEncounterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout patientPanelLayout = new javax.swing.GroupLayout(patientPanel);
        patientPanel.setLayout(patientPanelLayout);
        patientPanelLayout.setHorizontalGroup(
            patientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(patientPanelLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(patientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 520, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(patientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, patientPanelLayout.createSequentialGroup()
                            .addGroup(patientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, patientPanelLayout.createSequentialGroup()
                                    .addComponent(doctorIDText, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(30, 30, 30)
                                    .addComponent(doctorID, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, patientPanelLayout.createSequentialGroup()
                                    .addComponent(doctorNameText, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(30, 30, 30)
                                    .addComponent(doctorName, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, patientPanelLayout.createSequentialGroup()
                                    .addComponent(doctorCommunityText, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(30, 30, 30)
                                    .addComponent(doctorCommunity, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(patientPanelLayout.createSequentialGroup()
                                    .addComponent(doctorHospitalNumberText, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(30, 30, 30)
                                    .addComponent(doctorHospitalName, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGap(60, 60, 60))
                        .addGroup(patientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 520, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, patientPanelLayout.createSequentialGroup()
                                .addComponent(doctorAppointment, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(viewDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(40, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, patientPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(viewEncounter, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        patientPanelLayout.setVerticalGroup(
            patientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(patientPanelLayout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addGroup(patientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(viewDoctor)
                    .addComponent(doctorAppointment))
                .addGap(15, 15, 15)
                .addGroup(patientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(doctorName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(doctorNameText, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(patientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(doctorID)
                    .addComponent(doctorIDText, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(patientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(doctorCommunity)
                    .addComponent(doctorCommunityText, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(patientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(doctorHospitalName)
                    .addComponent(doctorHospitalNumberText, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(viewEncounter)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10))
        );

        add(patientPanel, "card3");

        guestPersonPanel.setBackground(new java.awt.Color(235, 195, 186));

        guestDoctorTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Name", "DoctorID", "Community", "HospitalNumber"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(guestDoctorTable);

        communityText.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        communityText.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        communityText.setText("Select Community:");

        doctorCommunityDropbox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        doctorCommunityDropbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doctorCommunityDropboxActionPerformed(evt);
            }
        });

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout guestPersonPanelLayout = new javax.swing.GroupLayout(guestPersonPanel);
        guestPersonPanel.setLayout(guestPersonPanelLayout);
        guestPersonPanelLayout.setHorizontalGroup(
            guestPersonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(guestPersonPanelLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(guestPersonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(guestPersonPanelLayout.createSequentialGroup()
                        .addComponent(communityText, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(50, 50, 50)
                        .addComponent(doctorCommunityDropbox, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 520, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(40, Short.MAX_VALUE))
        );
        guestPersonPanelLayout.setVerticalGroup(
            guestPersonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(guestPersonPanelLayout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addGroup(guestPersonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(doctorCommunityDropbox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(communityText)
                    .addComponent(searchButton))
                .addGap(29, 29, 29)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(346, Short.MAX_VALUE))
        );

        add(guestPersonPanel, "card4");
    }// </editor-fold>//GEN-END:initComponents

    private void loginButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginButtonActionPerformed
        // TODO add your handling code here:
        if(parser.isLong(patientIDField.getText()) && !parser.checkNull(patientIDField.getText())){
            long patientIDCred = Long.parseLong(patientIDField.getText());
            if(!parser.checkNull(patientPasswordField.getText())){
                String patientPassCred = String.valueOf(patientPasswordField.getText());
                for(Patient p: patientDirectory.getPatientList()){
                    if(p.getPatientID() == patientIDCred && (p.getPatientUserPassword() == null ? patientPassCred == null : p.getPatientUserPassword().equals(patientPassCred))){
                        patientLoggedIn = true;
                    }
                }
                if(patientLoggedIn){
                    patientLoginPanel.setVisible(false);
                    patientPanel.setVisible(true);

                    patientList = patientDirectory.getPatientList();
                    for(int i = 0; i < patientList.size();i++){
                        if(patientIDCred == patientList.get(i).getPatientID()){
                            Person p = patientList.get(i).getPerson();
                            patientCommunity = p.getPersonCommunity();
                        }
                    }
                    if(patientCommunity == ""){
                        JOptionPane.showMessageDialog(this, "Patient not found in any Community. Please assign it to one !!!");
                    }
                    else{
                        populateDoctorTable();
                    }
                }
                else{
                    JOptionPane.showMessageDialog(this, "Please Log In First");
                }
            }
            else{
                JOptionPane.showMessageDialog(this, "Password should not be null");
            }
        }
        else {
            JOptionPane.showMessageDialog(this, "Patient ID should be Long and not null");
        }
    }//GEN-LAST:event_loginButtonActionPerformed

    private void viewDoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewDoctorActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = doctorTable.getSelectedRow();
        
        if (selectedRowIndex<0){
            JOptionPane.showMessageDialog(this, "Please select a row to view Information !!");
        }
        
        else{
            DefaultTableModel model = (DefaultTableModel) doctorTable.getModel();
            long doctorIDP = (long)model.getValueAt(doctorTable.getSelectedRow(), 1);
            for(Hospital h: hospitalDirectory.getHospitalList()){
                for(Doctor d: h.getDoctorInHospital()){
                    if(d.getDoctorID() == doctorIDP){
                        hospital = h;
                        doctor = d;
                    }
                }
            }
            
            doctorID.setText(String.valueOf(doctor.getDoctorID()));
            doctorName.setText(String.valueOf(doctor.getPerson().getPersonName()));
            doctorCommunity.setText(String.valueOf(doctor.getPerson().getPersonCommunity()));
            doctorHospitalName.setText(String.valueOf(hospital.getHospitalNumber()));
        }
    }//GEN-LAST:event_viewDoctorActionPerformed

    private void doctorAppointmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doctorAppointmentActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) doctorTable.getModel();
        if(doctorTable.getSelectedRow()>=0 && !(patientIDField.getText().isEmpty())){
            long selectedDoctorID = (long) model.getValueAt(doctorTable.getSelectedRow(), 1);
            
            for(Patient p: patientDirectory.getPatientList()){
                if(Long.parseLong(patientIDField.getText()) == p.getPatientID()){
                    patientDoctor = p;
                }
            }
            
            for(Doctor d: doctorDirectory.getDoctorList()){
                if(selectedDoctorID == d.getDoctorID()){
                    doctorPatient = d;
                    if(!(d.getPatientToDoctor()).contains(patientDoctor))
                    {
                        d.BookPatientAppointment(patientDoctor);
                        JOptionPane.showMessageDialog(this, "Booked Appointment for Patient " + patientIDField.getText() + " with doctor " + doctorPatient.getPerson().getPersonName());
                    }
                    else{JOptionPane.showMessageDialog(this, "Appoint already booked!");}
                }
            }
        }
        else{
            JOptionPane.showMessageDialog(this, "Please select a Doctor or search by patId");
        }
    }//GEN-LAST:event_doctorAppointmentActionPerformed

    private void viewEncounterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewEncounterActionPerformed
        // TODO add your handling code here:
        if(parser.isLong(patientIDField.getText()) && !parser.checkNull(patientIDField.getText())){
            long patientIDCred = Long.parseLong(patientIDField.getText());
            if(!parser.checkNull(patientPasswordField.getText())){
                String patientPassCred = String.valueOf(patientPasswordField.getText());
        
                DefaultTableModel encounterModel = (DefaultTableModel) encounterTable.getModel();
                encounterModel.setRowCount(0);
                patientList = patientDirectory.getPatientList();
                for(Patient p: patientList){
                    if(patientIDCred == p.getPatientID()){
                        selectedPatient = p;
                    }
                }
                for(Encounter e: selectedPatient.getPatientEncounterHistory()){
                    Object[] row = new Object[5];
                    row[0] = e.getEncounterID();
                    row[1] = e.getLastHospitalVisitDate();
                    row[2] = e.getVitals().getBloodPressure();
                    row[3] = e.getVitals().getHeartRate();
                    row[4] = e.getVitals().getSymptoms();
                    encounterModel.addRow(row);
                }
            }
        }
    }//GEN-LAST:event_viewEncounterActionPerformed

    private void guestLoginButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guestLoginButtonActionPerformed
        // TODO add your handling code here:
        patientLoginPanel.setVisible(false);
        guestPersonPanel.setVisible(true);
    }//GEN-LAST:event_guestLoginButtonActionPerformed

    private void doctorCommunityDropboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doctorCommunityDropboxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_doctorCommunityDropboxActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        // TODO add your handling code here:
        if(doctorCommunityDropbox.getSelectedItem().toString() == " "){
            JOptionPane.showMessageDialog(this, "Please Select Community. It can't be Blank !!!");
        }
        else{
            String searchDoctorComm = doctorCommunityDropbox.getSelectedItem().toString();
            for(Community c: city.getCommunityList()){
                if(c.getCommunityName() == searchDoctorComm)
                    community = c;
            }
            
            DefaultTableModel guestDoctormodel = (DefaultTableModel) guestDoctorTable.getModel();
            guestDoctormodel.setRowCount(0);
            for(Hospital h: community.getHospitalList()){
                for(Doctor d : h.getDoctorInHospital()){
                    Object[] row = new Object[4];
                    row[0] = d.getPerson().getPersonName();
                    row[1] = d.getDoctorID();
                    row[2] = searchDoctorComm;
                    row[3] = h.getHospitalNumber();
                    guestDoctormodel.addRow(row);
                }
            }
        }
    }//GEN-LAST:event_searchButtonActionPerformed

    private void populateDoctorTable(){
        ArrayList<Doctor> doctorHospitalComm;
        for(Community i : city.getCommunityList()){
            if(i.getCommunityName() == patientCommunity){
                 hospitalArray= i.getHospitalList();
            }
        }
        for(Hospital j: hospitalArray){
            doctorHospitalComm = j.getDoctorInHospital();
            DefaultTableModel model = (DefaultTableModel) doctorTable.getModel();
            model.setRowCount(0);
            for(Doctor i: doctorHospitalComm){
                Object[] row = new Object[4];
                row[0] = i.getPerson().getPersonName();
                row[1] = i.getDoctorID();
                row[2] = patientCommunity;
                row[3] = j.getHospitalNumber();
                model.addRow(row);
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel communityText;
    private javax.swing.JButton doctorAppointment;
    private javax.swing.JTextField doctorCommunity;
    private javax.swing.JComboBox<String> doctorCommunityDropbox;
    private javax.swing.JLabel doctorCommunityText;
    private javax.swing.JTextField doctorHospitalName;
    private javax.swing.JLabel doctorHospitalNumberText;
    private javax.swing.JTextField doctorID;
    private javax.swing.JLabel doctorIDText;
    private javax.swing.JTextField doctorName;
    private javax.swing.JLabel doctorNameText;
    private javax.swing.JTable doctorTable;
    private javax.swing.JTable encounterTable;
    private javax.swing.JTable guestDoctorTable;
    private javax.swing.JButton guestLoginButton;
    private javax.swing.JPanel guestPersonPanel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton loginButton;
    private javax.swing.JTextField patientIDField;
    private javax.swing.JLabel patientIDText;
    private javax.swing.JPanel patientLoginPanel;
    private javax.swing.JPanel patientPanel;
    private javax.swing.JTextField patientPasswordField;
    private javax.swing.JLabel patientPasswordText;
    private javax.swing.JButton searchButton;
    private javax.swing.JButton viewDoctor;
    private javax.swing.JButton viewEncounter;
    // End of variables declaration//GEN-END:variables
}